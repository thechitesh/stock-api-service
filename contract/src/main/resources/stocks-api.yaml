openapi: 3.0.1
info:
  title: Stock Service
  description: |
    This contract exposes the APIs for stock service, with the help of these API you can maintain in the database.
    The APIs help you fetch the list of available stocks, add a new stock also allows you to do partial update
    and delete a particular stock
  version: 1.0.0

servers:
  - url: https:/myorg.com/v1/api
  - url: http:/myorg.com/v1/api

paths:
  /stocks:
    get:
      tags:
        - stocks
      summary: Get a list of all Stocks
      operationId: getAllStock
      parameters:
        - name: page
          in: query
          description: page of stock list
          required: true
          schema:
            type: integer
      responses:
        200:
          description: list of stocks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableContent'
        204:
          description: no stock is available
          content: {}
        500:
          description: Invalid ID supplied
          content: {}
    post:
      tags:
        - stocks
      summary: Add a new stock
      operationId: addStock
      requestBody:
        description: create a stock
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
        required: true
      responses:
        201:
          description: successfully added stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkResponse'
        400:
          description: bad request
          content: {}
        500:
          description: Invalid ID supplied
          content: {}

  /stocks/{id}:
    get:
      tags:
        - stocks
      summary: get one stock from the list
      operationId: getStockById
      parameters:
        - name: id
          in: path
          description: ID of stock to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        204:
          description: stock with given Id is not found
          content: {}
        500:
          description: Invalid ID supplied
          content: {}

    patch:
      tags:
        - stocks
      summary: update the price of a single stock
      operationId: updateStockPrice
      parameters:
        - name: id
          in: path
          description: ID of stock
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Amount that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        204:
          description: stock with given Id is not found
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        500:
          description: Invalid ID supplied
          content: {}

    delete:
      tags:
        - stocks
      summary: delete a single stock
      operationId: deleteStockById
      parameters:
        - name: id
          in: path
          description: ID of stock
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: delete request is accepted
        400:
          description: Invalid ID supplied
          content: {}
        500:
          description: Invalid ID supplied
          content: {}

components:
  schemas:
    PageableContent:
      type: object
      properties:
        stocks:
          type: array
          items:
            $ref: '#/components/schemas/Stock'
        _links:
          $ref: '#/components/schemas/Links'
    Stock:
      type: object
      required:
        - name
        - currentPrice
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          minLength: 1
          maxLength: 64
          pattern: '^[ A-Za-z0-9_@.\''&+-]*$'
          example: Apple
        symbol:
          type: string
          maxLength: 16
          example: APPL
        currentPrice:
          $ref: '#/components/schemas/Price'
        lastUpdate:
          type: string
          format: datetime
          example: '2022-02-06T06:49:44.534577'

    Links:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/linkResponse'
        next:
          $ref: '#/components/schemas/linkResponse'
        prev:
          $ref: '#/components/schemas/linkResponse'

    linkResponse:
      type: object
      required:
        - href
      properties:
        href:
          type: string

    Price:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          minimum: 0
          maximum: 99999999
          example: 10.10
        currency:
          type: string
          enum:
            - EUR
            - GBP
            - INR
            - USD
          example: "EUR"

#    Error:
#      type: object
#      properties:
#        code:
#          type: integer
#        message:
#          type: string